require 'spec_helper'

describe Mallow::Fluffer do

  before { @fluffer = Mallow::Fluffer.new [] }

  describe '#parse' do
    it 'passes its argument to #fluff after parsing it according to the config' do
      data   = "Ol' Blacksmith Jake makes a damn fine nail"
      parsed = ['AGREED']
      @fluffer.instance_variable_set :@config, parser: Object, verb: :eval
      Object.should_receive(:eval).with(data).and_return parsed
      @fluffer.should_receive(:fluff).with parsed
      @fluffer.parse data
    end
  end

  describe '#fluff' do
    it 'maps #fluff_one over its arguments' do
      data = %w{ i like a good american made hot dog now and again }
      data.each {|word| @fluffer.should_receive(:fluff_one).with word }
      @fluffer.fluff(data).should == data.map {nil}
    end
  end

  describe '#fluff_one' do
    context 'with rules' do
      before do
        @fluffer = Mallow.fluff do |match|
          match.an(Array).to {1}
          match.a(Hash).to {2}
        end
      end
      it "executes the fluffer's rules on its argument until one matches" do
        @fluffer.fluff_one([1]).should == 1
        @fluffer.fluff_one({a:1}).should == 2
      end
      it "raises an exception if no rule matches" do
        expect { @fluffer.fluff_one(1) }.to raise_error Mallow::Fluffer::DeserializationException
      end
    end
  end

  describe '::build' do
    it 'returns a new Mallow::Fluffer with rules generated by Mallow::Rule::Builder' do
      Mallow::Rule::Builder.should_receive(:build).and_return []
      Mallow::Fluffer.should_receive(:new).and_return @fluffer
      Mallow::Fluffer.build {}.should be_an_instance_of Mallow::Fluffer
    end

    it 'accepts an optional hash of configuration options' do
      opts = { parser: :icarly, verb: :hannah_montana, fake: :option }
      Mallow::Rule::Builder.stub build: []
      Mallow::Fluffer.should_receive(:new).with [], opts
      Mallow::Fluffer.build(opts) {}
    end
  end

end

