$LOAD_PATH << File.dirname(__FILE__)
require 'mallow/monadishes'
require 'mallow/dsl'
module Mallow
  class DeserializationException < StandardError; end

  class Core < Array
    class << self
      def build(&b); DSL.build &b end
    end
    def _fluff(es); es.map {|e| _fluff1 e}  end
    def _fluff1(e)
      reduce(Rule.return(e),:bind).unwrap!
    end
    def fluff(es); es.map  {|e| fluff1 e} end
    def fluff1(e); _fluff1(e).val end
  end

  class << self
    # aka Mallow::Core#build
    def fluff(&b); Core.build(&b) end
    # Defines a class method <sym> on <klass> to deserialize its argument (as 
    # with Core::fluff) using the Core generated by passing the supplied block
    # to Mallow.fluff
    def engulf(klass, sym=:fluff, &b)
      mtd, mod = Mallow.fluff(&b), Module.new
      mod.send(:define_method, sym) {|d| mtd.fluff d}
      klass.extend mod
    end
  end
end

